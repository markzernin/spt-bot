const {bot} = require('../../connections/token.connection');
const {getUser} = require('../../common/sequelize/saveUser.sequelize');
const {getPreviousDate, getNextDate} = require('../../common/support/functions.support');

module.exports = bot.hears(['üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'], async (ctx) => {
    try {
        const login = String(ctx.update.message.chat.id);
        const user = await getUser(login);
        const group = user.dataValues.group;

        if (!group) {
            return await ctx.reply('–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ —É—á–µ–±–Ω–∞—è –≥—Ä—É–ø–ø–∞.\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/start", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.');
        }
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –ª–∏–±–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–ª–µ–¥ –Ω–µ–¥–µ–ª–∏
        let nextDay = await getNextDate();
        let previousDay = await getPreviousDate();

        console.log(nextDay);

        /*
        –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è url —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥—Ä–µ—Å –∫—É–¥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å.
        –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è nextDay —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å, –ª–∏–±–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏ (–µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞ –∏–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å)
        */
        let url = `https://spt42.ru/studentu/korpus-2/data/${nextDay}.json`;

        let response = await fetch(url);

        let json = null;
        let timetable = null;
        let text = null;

        if (response.status === 200) {
            json = await response.json();

            timetable = json.filter(el => el['–ì—Ä—É–ø–ø–∞'] === group);

            text = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã <b>${group}</b> –Ω–∞ <b>${nextDay}</b>:\n\n`;

            timetable.forEach((el) => {
                text += `–ù–æ–º–µ—Ä –ø–∞—Ä—ã: <b>${el['–ù–æ–º–µ—Ä–ü–∞—Ä—ã']}</b>\n–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: <b>${el['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']}</b>\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>${el['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}</b>\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>${el['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}</b>\n\n`;
            });
            return await ctx.replyWithHTML(text);
        }
        else {
            url = `https://spt42.ru/studentu/korpus-2/data/${previousDay}.json`;
            response = await fetch(url);

            if (response.status !== 200) {
                return await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
            }
            json = await response.json();

            timetable = json.filter(el => el['–ì—Ä—É–ø–ø–∞'] === group);

            text = `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã <b>${group}</b> –Ω–∞ <b>${previousDay}</b>:\n\n`;

            timetable.forEach((el) => {
                text += `–ù–æ–º–µ—Ä –ø–∞—Ä—ã: <b>${el['–ù–æ–º–µ—Ä–ü–∞—Ä—ã']}</b>\n–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: <b>${el['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞']}</b>\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: <b>${el['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}</b>\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>${el['–ê—É–¥–∏—Ç–æ—Ä–∏—è']}</b>\n\n`;
            });
            return await ctx.replyWithHTML(text);
        }
    } catch (e) {
        console.log(e);
    }

});